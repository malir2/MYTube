--Tuesday 1/2/2024

It is the first full stack project in which I am going to make website like youtube.

First I make a complete professional folder structure.

1. npm init 
2. public folder
3. src folder (index.js, constant.js, app.js)
4. push in git

                        "src Folder Structer"
Files:
    1. index.js
    2. constant.js
    3. app.js

Folders:
        1. Controllers:

        2. db:
            => database.js

        3. middlewares:

        4. models:

        5. routes:

        6. utils:


We use Prettier to format the documents


                            "Connect Database"

To connect database we will use following steps:

1.  Make database in "Mongodb Atlas".
2.  Copy Url of database.
3.  Paste this URL in .env.
4.  Set the name of database in constant.js.
5.  Than go back to the "database.js" and import "mongoose".
6.  Than import database name from constant.js.
7.  After that make a fuction to connect to the database and make it async function.
8.  Use "try/catch" method to make connection.
9.  Than export it as default.
10. Import it in "index.js".
11. Install and import "dotenv" in index.js so all environment variables start as soon as our app starts.
12. Due to import method we have to config dotenv and make changes in dev in package.json.
13. After that our database connects successfully.

                            "Custom API response and error handling"

Now, we will make an express app and add middlewaresand configurations to it.

1.  In "app.js" import express.
2.  Make express.
3.  We will install two packages "cookie-parser" and "cors". Cookie-parser is used to handle cookies from the user and cors is used for Cross-Origin Resource Sharing.
4.  To use middlewares and configurations we will use "app.use()".
5.  First we will use cors for resourse sharing. It contain some options in object.
6.  Than we will use url encoded feature and json to set the comming data size.
7.  Use "express.static" in case if we want to stor something on our server.
8.  After that we will use cookie-parser.
9.  To listen our app on server we will import it in index.js and run if database connects successfully.

Now, we are going to make utilities so that we can use them when we need.

=> In utils folder we will make these files:

1. asyncHandler : It is made to for database because everytime we will connect with data base so we make it to make our work easier.
                    than we will make the in it.

(Note: To make our api respone amd failure standarized we will make utilities)
2. apiResponse : We make this file to send response from api.
3. apiError: We make this file to handle error section.